@import '_tx-default';



// Page Boundaries

@mixin tx-set-boundaries($minWidth: map-get($breakpoints, desktopMin), $maxWidth: map-get($breakpoints, desktopMax), $minHeight: 100%, $center: true) {
  @if $minWidth != none and $minWidth != 0 {
    min-width: $minWidth;
  }
  @if $maxWidth != none and $maxWidth != 0 {
    max-width: $maxWidth;
  }
  @if $minHeight != none and $minHeight != 0 {
    min-height: $minHeight;
  }
  @if $center == true {
    margin: 0 auto;
  }
}



// Page Scroll

@mixin tx-scroll-bar($condition: false, $autohide: true) {
  @if $condition == true {
    overflow-x: auto;
    overflow-y: scroll;
  } @else {
    overflow: auto;
  }
  @if $autohide == true {
    -ms-overflow-style: -ms-autohiding-scrollbar;
  }
}



// Focus

@mixin tx-focus-outline($width: 1px, $style: dotted, $color: $focus-outline, $offset: 3px) {
  outline: $width $style $color;
  @if $offset != none and $offset != 0 {
    outline-offset: $offset;
  }
}



// Typography Baseline

@mixin tx-baseline {
  font-size: $fontSize;
  line-height: $lineHeight;
}



// Inline Block

@mixin tx-inline-block($ie: $tx-IE, $extend: true) {
  @if $extend == true {
    @if $ie != true {
      @extend %tx-default-inline-block;
    } @else {
      @extend %tx-default-inline-block-IE;
    }
  } @else {
    @if $ie != true {
      display: inline-block;
    }
  }
}



// Pseudo Element

@mixin tx-pseudo($position: absolute, $display: block, $content: '', $ie: $tx-IE, $extend: true) {
  @if $position == 'absolute' and $display == 'block' and $content == '' and $extend == true {
    @extend %tx-default-pseudo;
  } @else {
    @if $display == 'inline-block' {
      @include tx-inline-block;
    } @else {
      display: $display;
    }
    @if not $ie {
      content: '' + $content;
    }
    position: $position;
  }
}

@mixin tx-pseudo-ie($before: true, $after: true, $class: '', $beforeContent: '', $afterContent: '') {
  $beforeClass: ieBefore + $class;
  $afterClass: ieAfter + $class;
  @if $before == true and $after == true {
    zoom: unquote('expression(this.runtimeStyle.zoom = 1, insertAdjacentHTML("afterBegin", "<i class="' + $beforeClass + '">' + $beforeContent + '</i>"), insertAdjacentHTML("beforeEnd", "<i class="' + $afterClass + '">' + $afterContent + '</i>"))');
  } @else if $before == true {
    zoom: unquote('expression(this.runtimeStyle.zoom = 1, insertAdjacentHTML("afterBegin", "<i class="' + $beforeClass + '">' + $beforeContent + '</i>"))');
  } @else {
    zoom: unquote('expression(this.runtimeStyle.zoom = 1, insertAdjacentHTML("beforeEnd", "<i class="' + $afterClass + '">' + $afterContent + '</i>"))');
  }
}

@mixin tx-pseudo-va {
  @extend %tx-default-pseudo-va;
}



// Max Width

@mixin tx-max-width($width, $fallback: $remFallback, $inPixels: false) {
  @if $inPixels == true {
    $fallback: true;
  }
  @if $fallback == true {
    max-width: $width;
  }
  @if $inPixels == false {
    max-width: ($width / $fontSize) * 1rem;
  }
}



//  Slide Down

@mixin tx-slide-down($maxHeight, $activeClass: '-is-active') {
  max-height: 0;

  &-#{$activeClass} {
    max-height: $maxHeight;
  }

}



//  Height in Grid Units

@mixin tx-grid-height($lines: 1, $borderWidth: 0, $setLineHeight: true, $setPadding: false, $fallback: $remFallback, $inPixels: false) {
  @if $inPixels == true {
    $fallback: true;
  }
  @if $setPadding == true {
    @if $fallback == true {
      padding: txf-rhythm-fallback($lines, 2 * $borderWidth) 0 0;
    }
    @if $inPixels == false {
      padding: txf-rhythm($lines, 2 * $borderWidth) 0 0;
    }
  } @else {
    @if $fallback == true {
      height: txf-rhythm-fallback($lines, 2 * $borderWidth);
    }
    @if $inPixels == false {
      height: txf-rhythm($lines, 2 * $borderWidth);
    }
  }
  @if $setLineHeight == true {
    line-height: $lines * $lineHeight - ($borderWidth / ($fontSize / 1px)) * 2;
  }
}



// Form Element Height in Grid Units

@mixin tx-form-height($lines: 1, $borderWidth: 1, $setLineHeight: false, $fallback: $remFallback, $inPixels: false) {
  @if $inPixels == true {
    $fallback: true;
  }
  @if $setLineHeight == true {
    line-height: $lines * $lineHeight - ($borderWidth / ($fontSize / 1px)) * 2;
  } @else {
    @if $fallback == true {
      height: txf-rhythm-fallback($lines, $offset: 2 * $borderWidth);
    }
    @if $inPixels == false {
      height: txf-rhythm($lines, $offset: 2 * $borderWidth);
    }
  }
}



// Hyphens

@mixin tx-hyphens($hyphens: manual) {
  -epub-hyphens: $hyphens;
  hyphens: $hyphens;
}



// Font Size

@mixin tx-font-size($newFontSize, $lines: approx, $fallback: $remFallback) {
  $size: 0;
  @if type-of($newFontSize) == number {
    $size: $newFontSize;
  } @else {
    $size: map-get($fontSizes, $newFontSize);
  }
  @if $fallback == true {
    font-size: $size;
  }
  $newFontSizeRem: $size / $fontSize;
  font-size: #{$newFontSizeRem}rem;
  @if $lines != none and $lines != approx and $lines != 0 {
    line-height: ($lines * $lineHeight) * ($fontSize / $size);
  }
  @if $lines == 0 {
    line-height: 0;
  }
  @if $lines == approx {
    line-height: ($lineHeight * ceil($size / ($fontSize * $lineHeight))) * ($fontSize / $size);
  }
}



// Rhythm (Margin)

@mixin tx-rhythm($leader: 0, $trailer: 0, $marginRight: 0, $marginLeft: 0, $fallback: $remFallback, $inPixels: false) {
  @if $inPixels == true {
    $fallback: true;
  }
  $mtop-px: 0;
  $mtop-rem: 0;
  $mbtm-px: 0;
  $mbtm-rem: 0;
  @if $leader == $trailer {
    $vertical-px: txf-rhythm-fallback($leader);
    $vertical-rem: txf-rhythm($leader);
    @if $marginRight == $marginLeft {
      @if $fallback == true {
        margin: $vertical-px $marginRight;
      }
      @if $inPixels == false {
        margin: $vertical-rem $marginRight;
      }
    } @else {
      @if $fallback == true {
        margin: $vertical-px $marginRight $vertical-px $marginLeft;
      }
      @if $inPixels == false {
        margin: $vertical-rem $marginRight $vertical-rem $marginLeft;
      }
    }
  } @else {
    @if $leader != 0 {
      $mtop-px: txf-rhythm-fallback($leader);
      $mtop-rem: txf-rhythm($leader);
    }
    @if $trailer != 0 {
      $mbtm-px: txf-rhythm-fallback($trailer);
      $mbtm-rem: txf-rhythm($trailer);
    }
    @if $marginRight == $marginLeft {
      @if $fallback == true {
        margin: $mtop-px $marginRight $mbtm-px;
      }
      @if $inPixels == false {
        margin: $mtop-rem $marginRight $mbtm-rem;
      }
    } @else {
      @if $fallback == true {
        margin: $mtop-px $marginRight $mbtm-px $marginLeft;
      }
      @if $inPixels == false {
        margin: $mtop-rem $marginRight $mbtm-rem $marginLeft;
      }
    }
  }
}



// Rhythm Padding

@mixin tx-rhythm-padding($paddingLeader: 0, $paddingTrailer: 0, $paddingRight: 0, $paddingLeft: 0, $fallback: $remFallback, $inPixels: false) {
  @if $inPixels == true {
    $fallback: true;
  }
  $ptop-px: 0;
  $ptop-rem: 0;
  $pbtm-px: 0;
  $pbtm-rem: 0;
  @if $paddingLeader == $paddingTrailer {
    $vertical-px: txf-rhythm-fallback($paddingLeader);
    $vertical-rem: txf-rhythm($paddingLeader);
    @if $paddingRight == $paddingLeft {
      @if $fallback == true {
        padding: $vertical-px $paddingRight;
      }
      @if $inPixels == false {
        padding: $vertical-rem $paddingRight;
      }
    } @else {
      @if $fallback == true {
        padding: $vertical-px $paddingRight $vertical-px $paddingLeft;
      }
      @if $inPixels == false {
        padding: $vertical-rem $paddingRight $vertical-rem $paddingLeft;
      }
    }
  } @else {
    @if $paddingLeader != 0 {
      $ptop-px: txf-rhythm-fallback($paddingLeader);
      $ptop-rem: txf-rhythm($paddingLeader);
    }
    @if $paddingTrailer != 0 {
      $pbtm-px: txf-rhythm-fallback($paddingTrailer);
      $pbtm-rem: txf-rhythm($paddingTrailer);
    }
    @if $paddingRight == $paddingLeft {
      @if $fallback == true {
        padding: $ptop-px $paddingRight $pbtm-px;
      }
      @if $inPixels == false {
        padding: $ptop-rem $paddingRight $pbtm-rem;
      }
    } @else {
      @if $fallback == true {
        padding: $ptop-px $paddingRight $pbtm-px $paddingLeft;
      }
      @if $inPixels == false {
        padding: $ptop-rem $paddingRight $pbtm-rem $paddingLeft;
      }
    }
  }
}



// Table Borders with Adjustment

@mixin tx-table-borders($width: 1px, $lines: 1, $style: solid, $color: $black, $paddingRight: .5em, $paddingLeft: .5em, $fallback: $remFallback, $inPixels: false) {
  @if $inPixels == true {
    $fallback: true;
  }
  $calculated-borderWidth-fallback: $width;
  $calculated-borderWidth: $width / $fontSize * 1rem;
  $calculated-verticalPadding-fallback: txf-rhythm-fallback($lines, $width);
  $calculated-verticalPadding: txf-rhythm($lines, $width);
  @if $lines != 0 {
    @if $paddingRight == $paddingLeft and $paddingRight != 0 {
      @if $fallback == true {
        padding: ($calculated-verticalPadding-fallback) ($paddingRight) ($calculated-verticalPadding-fallback + $calculated-borderWidth-fallback);
      }
      @if $inPixels == false {
        padding: ($calculated-verticalPadding) ($paddingRight) ($calculated-verticalPadding + $calculated-borderWidth);
      }
    } @else {
      @if $fallback == true {
        padding: ($calculated-verticalPadding-fallback) ($paddingRight) ($calculated-verticalPadding-fallback + $calculated-borderWidth-fallback) ($paddingLeft);
      }
      @if $inPixels == false {
        padding: ($calculated-verticalPadding) ($paddingRight) ($calculated-verticalPadding + $calculated-borderWidth) ($paddingLeft);
      }
    }
  }
  border: $width $style $color;
}



// Layers

@mixin tx-layer($layer: content, $shift: 0) {
  @if $layer == 'over' {
    z-index: (200 + $shift);
  } @else if $layer == 'top' {
    z-index: (100 + $shift);
  } @else if $layer == 'content' {
    z-index: (50 + $shift);
  } @else if $layer == 'bottom' {
    z-index: (0 + $shift);
  } @else if $layer == 'under' {
    z-index: (-1 - $shift);
  }
}



// Sprites

@function txf-sprite-width($name) {
  @return nth($name, 5);
}

@function txf-sprite-height($name) {
  @return nth($name, 6);
}

@mixin tx-sprite-block($name, $padding: false) {
  width: nth($name, 5);
  @if $padding {
    @extend %tx-sprite-block;
    padding: nth($name, 6) 0 0;
  } @else {
    height: nth($name, 6);
  }
}

@mixin tx-sprite-image($name) {
  background-image: url(#{nth($name, 9)});
}

@mixin tx-sprite-position($name) {
  background-position: nth($name, 3) nth($name, 4);
}

@mixin tx-sprite($sheet, $name, $position: true, $block: false, $padding: false, $color: null) {
  @extend #{'%ssh-' + $sheet};
  @if $block {
    @include tx-sprite-block($name, $padding);
  }
  @if $color {
    background-color: $color;
  }
  @if $position {
    @include tx-sprite-position($name);
  }
}



// Extend DataURI Image

@mixin tx-extend-image($class, $ie: $tx-IE) {
  @if not $ie {
    @extend #{'%image-' + $class};
  } @else {
    @extend #{'%ie-image-' + $class};
  }
}



// Block Placeholder

@mixin tx-block-placeholder($image: '../images/tx/tx-placeholder.png') {
  background: url($image);
}

@mixin tx-icon($width: 15px, $height: 15px) {
  @include tx-block-placeholder;
  width: $width;
  height: $height;
}



// Functions

@function txf-rhythm($lines: 1, $offset: 0) {
  $result: ($lines * $lineHeight * $fontSize - $offset) / $fontSize * 1rem;
  @if $result == '0rem' {
    @return 0;
  } @else {
    @return $result;
  }
}

@function txf-rhythm-fallback($lines: 1, $offset: 0) {
  $result: ($lines * $lineHeight * $fontSize - $offset);
  @if $result == '0px' {
    @return 0;
  } @else {
    @return $result;
  }
}



// Utility Functions

@function txf-pow($base, $exp) {
  $result: 1;
  @if $exp == 0 {
    @return $result;
  } @else {
    @for $i from 1 through $exp {
      $result: $result * $base;
    }
    @return $result;
  }
}

@function txf-breakpointRem($point) {
  @return #{(map-get($breakpoints, $point) / $fontSize) * $fontSizeQuotient}em
}

@function txf-breakpoint($point) {
  @return map-get($breakpointsRem, $point);
}
